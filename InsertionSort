#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

// Template for a generic Student object
template <typename T>
class Student {
private:
    string id;
    string name;
    double gpa;

public:
    // Constructor
    Student(string studentId, string studentName, T studentGpa) {
        id = studentId;
        name = studentName;
        gpa = studentGpa;
    }

    // Overloading operator < for sorting based on the template type
    bool operator<(const Student<T>& other) const {
        // Sort by name by default
        return name < other.name;
    }


    // Friend function for printing
    friend ostream& operator<<(ostream& os, const Student<T>& s) {
        os << "ID: " << s.id << ", Name: " << s.name << ", GPA: " << s.gpa;
        return os;
    }

    string getID() const {
        return id;
    }
    string getName() const {  // Consistent naming convention
        return name;
    }
    const double getGPA()const{
        return gpa;
    }
};

// Function to sort students using template-based comparison
template <class T>
void insertionSort(vector<Student<T>>& students) {
    for (int i = 1; i < students.size(); i++) {
        Student<T> key = students[i];
        int j = i - 1;
        while (j >= 0 && key < students[j]) {
            students[j + 1] = students[j];
            j = j - 1;
        }
        students[j + 1] = key;
    }
}
bool compareGPA(const Student<double>& a, const Student<double>& b) {
    return a.getGPA() > b.getGPA();
}
template <typename T>
void print(ostream& os, const vector<T>& students) {
    for (const T& student : students) {
        os << student << endl;
    }
}


int main() {
    // Read student data from file (students.txt)
    ifstream infile("students.txt");
    if (!infile.is_open()) {
        cerr << "Error opening file 'students.txt'" << endl;
        return 1;
    }

    int numStudents;
    infile >> numStudents;
    infile.ignore();

    vector<Student<double>> students;  // Use double for GPA

    for (int i = 0; i < numStudents; ++i) {
        string name, id;
        double gpa;
        getline(infile, name);  // Read entire line for full name
        getline(infile, id);
        infile >> gpa;
        infile.ignore();  // Consume newline character

        students.push_back(Student<double>(id, name, gpa));
    }

    infile.close();

    // Sort by name
    insertionSort(students);

    ofstream nameFile("SortedByName.txt");
    if (!nameFile.is_open()) {
        cerr << "Error opening file 'SortedByName.txt'" << endl;
        return 1;
    }

    nameFile << "Students Sorted By Name:\n";
    print(nameFile, students);
    nameFile.close();

    // Sort by GPA
    sort(students.begin(), students.end(), compareGPA);

    ofstream gpaFile("SortedByGPA.txt");
    if (!gpaFile.is_open()) {
        cerr << "Error opening file 'SortedByGPA.txt'" << endl;
        return 1;
    }

    gpaFile << "Students Sorted By GPA (Descending):\n";
    print(gpaFile, students);
    gpaFile.close();

    cout << "Student data sorted and written to files successfully!" << endl;

    return 0;
}
