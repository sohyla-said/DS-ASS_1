#include <iostream>
using namespace std;

template <typename T>
class Student {
private:
    string id;
    string name;
    double gpa;

public:
    // Constructor
    Student(string studentId, string studentName, T studentGpa) {
        id = studentId;
        name = studentName;
        gpa = studentGpa;
    }

    // Overloading operator < for sorting based on the template type
    bool operator<(const Student<T>& other) const {
        // Sort by name by default
        return name < other.name;
    }


    // Friend function for printing
    friend ostream& operator<<(ostream& os, const Student<T>& s) {
        os << "ID: " << s.id << ", Name: " << s.name << ", GPA: " << s.gpa;
        return os;
    }

    string getID() const {
        return id;
    }
    string getName() const {  // Consistent naming convention
        return name;
    }
    const double getGPA()const{
        return gpa;
    }
};
